plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.diffplug.spotless' version '7.0.2'
    id 'com.google.cloud.tools.jib' version '3.4.5'
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.5'

    // p6spy
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.10.0'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

// compileJava task가 실행되기 전에 spotlessApply task를 실행하도록 설정: spotlessApply -> compileJava
tasks.named('compileJava') {
    dependsOn 'spotlessApply'
}

spotless {
    java {
        googleJavaFormat().aosp()   // Google Java Format 적용 AOSP(Andriod Open Source Project) 스타일: 탭은 4칸
        removeUnusedImports()       // 사용하지 않는 import문 제거
        leadingTabsToSpaces(4)      // 탭을 4칸 공백으로 변경
        importOrder()               // import문 정렬
        trimTrailingWhitespace()    // 뒤에 공백 제거
        endWithNewline()            // 파일 끝에 개행 추가
    }
}

jib {
    def profile = System.getenv('PROFILE') ?: ''
    def dockerUsername = System.getenv('DOCKER_USERNAME') ?: ''
    def dockerPassword = System.getenv('DOCKER_PASSWORD') ?: ''
    def dockerRepo = System.getenv('DOCKER_REPO') ?: ''

    // 기본 이미지 태그가 없으면 tags 명시해도 latest 태그도 함께 업로드됨
    def imageName = dockerUsername && dockerRepo ? "$dockerUsername/$dockerRepo-$profile" : ''
    def imageTag = System.getenv('IMAGE_TAG') ?: ''

    from {
        image = 'amazoncorretto:21-alpine-jdk'
    }
    to {
        image = imageName
        tags = [ imageTag ]
        auth {
            username = dockerUsername
            password = dockerPassword
        }
    }
    container {
        jvmFlags = [
            '-Dspring.profiles.active=' + profile,
            '-Duser.timezone=Asia/Seoul',
            '-Dfile.encoding=UTF-8',
            '-XX:+UseContainerSupport'
        ]
    }
}

// .env 파일의 내용을 읽어서 Map으로 반환하는 함수
// 빌드 시 환경 변수를 적용하기 위함
def loadDotEnv() {
    def envMap = [:]
    def envFile = file('.env')
    if (envFile.exists()) {
        envFile.eachLine { line ->
            line = line.trim()
            if (line && !line.startsWith("#") && line.contains("=")) {
                def (key, value) = line.split("=", 2)
                envMap[key.trim()] = value.trim()
            }
        }
    }
    return envMap
}

def dotEnv = loadDotEnv()

tasks.withType(Test).configureEach {
    environment dotEnv
}

tasks.named('bootRun').configure {
    environment dotEnv
}
